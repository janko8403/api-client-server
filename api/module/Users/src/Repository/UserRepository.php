<?php

namespace Users\Repository;

use Configuration\Entity\Position;
use Customers\Entity\Customer;
use Doctrine\ORM\Query;
use Features\Entity\Feature;
use Hr\Repository\BaseRepository;
use Hr\Repository\SearchableInterface;
use Marketing\Entity\Agreement;
use Marketing\Entity\UserAgreement;
use Monitorings\Entity\MonitoringQuestionJoint;
use Products\Entity\Product;
use Questionnaire\Entity\User\Step;
use Users\Entity\User;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends BaseRepository implements SearchableInterface
{
    public function searchIds(array $data): array
    {
        $query = $this->search($data);
        $result = $query->getArrayResult();

        return array_map(function ($u) {
            return $u['id'];
        }, $result);
    }

    public function search(array $data): Query
    {
        $qb = $this->createQueryBuilder('u');
        $select = ['u', 'us', 'p', 'ddr'];
        $qb->leftJoin('u.supervisor', 'us');
        $qb->leftJoin('u.position', 'p');
        $qb->leftJoin('u.region', 'ddr');

        empty($data['email']) ?: $qb->andWhere('u.email LIKE :email')
            ->setParameter('email', "%$data[email]%");
        empty($data['name']) ?: $qb->andWhere("CONCAT(u.name, ' ', u.surname) LIKE :name")
            ->setParameter('name', "%$data[name]%");
        empty($data['login']) ?: $qb->andWhere('u.login LIKE :login')
            ->setParameter('login', "%$data[login]%");
        empty($data['phone']) ?: $qb->andWhere('u.phonenumber LIKE :phonenumber')
            ->setParameter('phonenumber', "%$data[phone]%");
        empty($data['position']) ?: $qb->andWhere($qb->expr()->in('u.configurationPosition', $data['position']));
        empty($data['region']) ?: $qb->andWhere($qb->expr()->in('ddr.id', $data['region']));
        empty($data['supervisor']) ?: $qb->andWhere($qb->expr()->in('us.id', $data['supervisor']));

        if (isset($data['isactive']) && $data['isactive'] != 2 && $data['isactive'] != '') {
            $qb->andWhere($qb->expr()->eq('u.isactive', $data['isactive']));
        }

        if (!isset($data['isactive'])) {
            $qb->andWhere($qb->expr()->eq('u.isactive', 1));
        }

        if (isset($data['messageDate']) && $data['messageDate'] != '') {
            if ($data['messageDate'] == '1') {
                $qb->andWhere('u.messageDate is not null');
            } else {
                $qb->andWhere('u.messageDate is null');
            }
        }

        if (!empty($data['customer']) && !empty($data['distance'])) {
            // find one customer matching crite
            $customer = $this->_em->find(Customer::class, $data['customer']);

            if ($customer && ($lat = $customer->getLatitude()) && ($lng = $customer->getLongitude())) {
                $dql = <<<DQL
 if(
    coalesce(u.lat, 0) != 0 and coalesce(u.lng, 0) != 0, 
    sqrt(POWER({$lat} - u.lat, 2) + Power({$lng} - u.lng, 2)) * 73, 
    1000
) <= :distance 
DQL;
                $qb->andWhere($dql)->setParameter('distance', $data['distance']);
            }
        }

        $qb->select($select);
        $qb->addOrderBy('u.surname', 'asc');
        $qb->addOrderBy('u.name', 'asc');

        return $qb->getQuery();
    }

    public function getUsersForRegionsVisibility($params)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->select('u.id', 'u.name', 'u.surname');
        if (isset($params['regionsVisibility'])) {
            if (is_array($params['regionsVisibility'])) {
                if (count($params['regionsVisibility']) == 0) {
                    $qb->andWhere('1 = 2'); // empty regions -> no monitorings should be displayed
                } else {
                    $qb->andWhere($qb->expr()->in('u.region', $params['regionsVisibility']));
                }
            }
        }
        $qb->andWhere('u.isactive = 1');
        $qb->addOrderBy('u.surname', 'asc');
        $qb->addOrderBy('u.name', 'asc');

        $tmp = [];
        $data = $qb->getQuery()->execute();
        foreach ($data as $d) {
            $tmp["{$d['id']}"] = $d['surname'] . ' ' . $d['name'];
        }

        return $tmp;
    }

    public function clearUserSessions(User $user)
    {
        $stmt = $this->_em->getConnection()->prepare("DELETE FROM oauth_access_tokens WHERE user_id = :user");
        $stmt->execute(['user' => $user->getLogin()]);

        $stmt = $this->_em->getConnection()->prepare("DELETE FROM oauth_refresh_tokens WHERE user_id = :user");
        $stmt->execute(['user' => $user->getLogin()]);
    }

    public function getSubordinates(int $userId)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->andWhere('u.supervisor = :supervisor')->setParameter('supervisor', $userId);

        return $qb->getQuery()->execute();
    }

    public function getDictionary(): array
    {
        $qb = $this->createQueryBuilder('u');
        $qb->andWhere('u.isactive = true');
        $qb->andWhere('u.istester = false');
        $qb->orderBy('u.surname', 'asc');

        $temp = [];
        $data = $qb->getQuery()->execute();
        foreach ($data as $d) {
            $temp[$d->getId()] = $d->getFullname();
        }

        return $temp;
    }

    public function fetchAllActive()
    {
        $qb = $this->createQueryBuilder('u');
        $qb->andWhere('u.isactive = true');
        $qb->addOrderBy('u.surname', 'asc');
        $qb->addOrderBy('u.name', 'asc');

        return $qb->getQuery()->execute();
    }

    public function fetchAdmins()
    {
        $qb = $this->createQueryBuilder('u');
        $qb->andWhere('u.isactive = true');
        $qb->join('u.configurationPosition', 'cp');
        $qb->andWhere('cp.key = :key')->setParameter('key', Position::POSITION_ADMIN);
        $qb->addOrderBy('u.surname', 'asc');
        $qb->addOrderBy('u.name', 'asc');

        return $qb->getQuery()->execute();
    }

    public function getFirstActiveAdmin()
    {
        $qb = $this->createQueryBuilder('u');
        $qb->andWhere('u.isactive = true');
        $qb->andWhere('u.istester = false');
        $qb->join('u.configurationPosition', 'cp');
        $qb->andWhere('cp.key = :position')->setParameter('position', Position::POSITION_ADMIN);
        $users = $qb->getQuery()->execute();

        return $users[0] ?? null;
    }
}
