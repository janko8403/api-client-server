<?php

namespace Customers\Repository;

use Customers\Entity\Customer;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;
use Hr\Repository\BaseRepository;
use Hr\Repository\SearchableInterface;
use Monitorings\Entity\MonitoringQuestionJoint;

/**
 * CustomerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomerRepository extends BaseRepository implements SearchableInterface
{
    public function search(array $data): Query
    {
        $qb = $this->getQueryBuilder($data);

        return $this->addOrder($qb, $data);
    }

    /**
     * @param array $data
     * @return array
     */
    public function searchIds(array $data): array
    {
        $qb = $this->getQueryBuilder($data);
        $qb->select('c.id');
        $qb->distinct();
        $query = $this->addOrder($qb, $data);

        $ids = [];
        foreach ($query->getScalarResult() as $customer) {
            $ids[$customer['id']] = $customer['id'];
        }

        return $ids;
    }

    public function checkCustomerConditions(int $customerId, MonitoringQuestionJoint $joint): bool
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('count(c)');
        $qb->leftJoin('c.subchain', 'sc');
        $qb->leftJoin('sc.chain', 'ch');
        $qb->leftJoin('c.format', 'f');
        $qb->leftJoin('c.size', 's');
        $qb->andWhere($qb->expr()->eq('c.id', $customerId));

        if ($joint->getChains()->count()) {
            $chains = [];
            foreach ($joint->getChains() as $chain) {
                $chains[] = $chain->getId();
            }

            $qb->andWhere($qb->expr()->in('ch.id', $chains));
        }
        if ($joint->getSubchains()->count()) {
            $subchains = [];
            foreach ($joint->getSubchains() as $subchain) {
                $subchains[] = $subchain->getId();
            }

            $qb->andWhere($qb->expr()->in('sc.id', $subchains));
        }
        if ($joint->getFormats()->count()) {
            $formats = [];
            foreach ($joint->getFormats() as $format) {
                $formats[] = $format->getId();
            }

            $qb->andWhere($qb->expr()->in('f.id', $formats));
        }

        // SUBFORMATS !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        if ($joint->getSubformats()->count()) {
            // brak powiÄ…zania klient - podformat
        }

        if ($joint->getSizes()->count()) {
            $sizes = [];
            foreach ($joint->getSizes() as $size) {
                $sizes[] = $size->getId();
            }

            $qb->andWhere($qb->expr()->in('s.id', $sizes));
        }

//        echo $qb->getQuery()->getDQL();
//        echo '<br/>';
//        echo $qb->getQuery()->getSQL();
//        die();

        return $qb->getQuery()->getSingleScalarResult() > 0;
    }

    public function getCustomerWithActiveData(int $id, bool $hydrateArray = false)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c', 'cd', 'sc', 'ch', 'cch', 'ddr', 'dds', 'ddvf', 'ddp', 'ddf', 'ddc', 'ddlr');
        $qb->innerJoin('c.customerData', 'cd', Query\Expr\Join::WITH, 'cd.isActive = 1');
        $qb->leftJoin('c.subchain', 'sc');
        $qb->leftJoin('c.chain', 'cch');
        $qb->leftJoin('sc.chain', 'ch');
        $qb->leftJoin('c.region', 'ddr');
        $qb->leftJoin('c.size', 'dds');
        $qb->leftJoin('c.visitsFrequency', 'ddvf');
        $qb->leftJoin('c.priority', 'ddp');
        $qb->leftJoin('c.format', 'ddf');
        $qb->leftJoin('cd.city', 'ddc');
        $qb->leftJoin('c.logisticRegion', 'ddlr');
        $qb->andWhere($qb->expr()->eq('c.id', $id));

        if ($hydrateArray) {
            return $qb->getQuery()->getArrayResult()[0];
        } else {
            return $qb->getQuery()->execute()[0];
        }
    }

    public function findForRegionsVisibility(array $regionsVisibility = null): array
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c', 'cd', 'ddr');
        $qb->innerJoin('c.customerData', 'cd', Query\Expr\Join::WITH, 'cd.isActive = 1');
        $qb->leftJoin('c.region', 'ddr');

        if (!empty($regionsVisibility) && is_array($regionsVisibility) && count($regionsVisibility) > 0) {
            $qb->andWhere($qb->expr()->in('ddr.id', $regionsVisibility));
        } else {
            $qb->andWhere('1 = 2'); // empty regions -> no customers should be displayed
        }

        $qb->andWhere('c.isActive = 1');
        $qb->addOrderBy('cd.name');

        return $qb->getQuery()->execute();
    }

    public function updateCreditLimitInfo(string $innerCustomerId, string $value)
    {
        $sql = 'UPDATE customer SET creditLimitInfo = :value WHERE innerCustomerId = :id';
        $stmt = $this->_em->getConnection()->prepare($sql);
        $stmt->execute(['value' => $value, 'id' => $innerCustomerId]);
    }

    public function clearCustomersField(string $field, bool $isNull)
    {
        $sql = sprintf(
            "UPDATE customer SET %s = %s",
            $field,
            $isNull ? 'null' : ''
        );
        $stmt = $this->_em->getConnection()->prepare($sql);
        $stmt->execute();
    }

    public function updateField(int $customerId, string $field, string $value)
    {
        $sql = sprintf(
            "UPDATE customer SET %s = :value WHERE id = :id",
            $field
        );
        $stmt = $this->_em->getConnection()->prepare($sql);
        $stmt->execute(['value' => $value, 'id' => $customerId]);
    }

    public function searchAutocomplete(string $term, bool $searchById): array
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c', 'cd', 'ddc');
        $qb->innerJoin('c.customerData', 'cd', Query\Expr\Join::WITH, 'cd.isActive = 1');
        $qb->leftJoin('cd.city', 'ddc');

        if ($searchById) {
            $qb->andWhere('c.id = :id')->setParameter('id', $term);
        } else {
            $qb->andWhere('cd.name like :term OR cd.streetName like :term OR c.innerCustomerId like :term OR ddc.name like :term');
            $qb->setParameter('term', "%$term%");
        }

        $tmp = [];
        /** @var Customer $c */
        foreach ($qb->getQuery()->setMaxResults(10)->execute() as $c) {
            $cd = $c->getActiveData();

            $text = sprintf(
                '%s %s %s',
                $cd->getName(),
                $c->getInnerCustomerId(),
                $cd->getFullAddress()
            );
            $tmp[] = ['id' => $c->getId(), 'text' => $text];
        }

        return $tmp;
    }

    public function fetchWithoutCoordinates(int $limit): array
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c', 'cd');
        $qb->innerJoin('c.customerData', 'cd', Query\Expr\Join::WITH, 'cd.isActive = 1');
        $qb->andWhere('c.isActive = 1');
        $qb->andWhere('c.latitude is null');
        $qb->andWhere('c.longitude is null');
        $qb->orderBy('c.creationDate', 'desc');
        $qb->setMaxResults($limit);

        // filter out empty customers
        $qb->andWhere('c.subchain != 77');
        $qb->andWhere('cd.city != 4792');

        return $qb->getQuery()->execute();
    }

    public function calculateFte(int $days): array
    {
        $sql = <<<SQL
select cust.payerId, cust.locationId, group_concat(distinct cust.id separator '|') as customerIds,
greatest(ceil(count(cust.id) / 2), 4) as fte
from commissions c
join customer cust on c.customerId = cust.id
where c.startDate > now()
and date(c.startDate) <= date(date_add(now(), interval :days day))
and c.cancelled = 0
and c.taken = 0
and cust.locationId is not null
group by cust.payerId, cust.locationId
SQL;
        $stmt = $this->_em->getConnection()->prepare($sql);
        $result = $stmt->executeQuery([
            'days' => $days,
        ]);

        return $result->fetchAllAssociative();
    }

    public function setFte(int $fte): void
    {
        $sql = <<<SQL
update customer cust set cust.fte = :fte
SQL;
        $stmt = $this->_em->getConnection()->prepare($sql);
        $stmt->executeQuery([
            'fte' => $fte,
        ]);
    }

    public function findActiveInDays(int $days): array
    {
        $sql = <<<SQL
select distinct c.id
from customer c
join commissions com on c.id = com.customerId
where c.isActive = 1
and com.cancelled = 0
and DATEDIFF(now(), com.startDate) <= :days
SQL;
        $stmt = $this->_em->getConnection()->prepare($sql);
        $result = $stmt->executeQuery([
            'days' => $days,
        ]);

        return $result->fetchAllAssociative();
    }

    private function getQueryBuilder(array $data): QueryBuilder
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c', 'cd', 'sc', 'ch', 'ddr', 'dds', 'ddvf', 'ddp', 'ddc', 'ddlr', 'ddss', 'ddcss', 'ddcs', 'u');
        $qb->innerJoin('c.customerData', 'cd', Query\Expr\Join::WITH, 'cd.isActive = 1');
        $qb->leftJoin('c.subchain', 'sc');
        $qb->leftJoin('sc.chain', 'ch');
        $qb->leftJoin('c.region', 'ddr');
        $qb->leftJoin('c.size', 'dds');
        $qb->leftJoin('c.visitsFrequency', 'ddvf');
        $qb->leftJoin('c.priority', 'ddp');
        $qb->leftJoin('c.format', 'ddf');
        $qb->leftJoin('cd.city', 'ddc');
        $qb->leftJoin('c.logisticRegion', 'ddlr');
        $qb->leftJoin('c.creator', 'u');
        $qb->leftJoin('c.subsize', 'ddss');
        $qb->leftJoin('c.subformat', 'ddsf');
        $qb->leftJoin('c.saleStage', 'ddcss');
        $qb->leftJoin('c.customerStatus', 'ddcs');

        if (!empty($data['name'])) {
            $qb->andWhere("cd.name LIKE :name OR ddc.name LIKE :name OR CONCAT(cd.streetName, ' ', cd.streetNumber) LIKE :name")
                ->setParameter('name', "%$data[name]%");
        }

        empty($data['innerId']) ?: $qb->andWhere('c.innerCustomerId LIKE :innerCustomerId')
            ->setParameter('innerCustomerId', "%$data[innerId]%");

        if (!empty($data['chain'])) {
            if (is_array($data['chain'])) {
                $qb->andWhere($qb->expr()->in('ch.id', $data['chain']));
            } else {
                $qb->andWhere($qb->expr()->eq('ch.id', $data['chain']));
            }
        }

        empty($data['logisticRegion']) ?: $qb->andWhere($qb->expr()->in('ddlr.id', $data['logisticRegion']));
        empty($data['saleStage']) ?: $qb->andWhere($qb->expr()->in('ddcss.id', $data['saleStage']));
        empty($data['customerStatus']) ?: $qb->andWhere($qb->expr()->in('ddcs.id', $data['customerStatus']));
        empty($data['visitsFrequency']) ?: $qb->andWhere($qb->expr()->in('ddvf.id', $data['visitsFrequency']));
        empty($data['region']) ?: $qb->andWhere($qb->expr()->in('ddr.id', $data['region']));
        empty($data['size']) ?: $qb->andWhere($qb->expr()->in('dds.id', $data['size']));
        empty($data['priority']) ?: $qb->andWhere($qb->expr()->in('ddp.id', $data['priority']));
        empty($data['format']) ?: $qb->andWhere($qb->expr()->in('ddf.id', $data['format']));
        empty($data['creator']) ?: $qb->andWhere($qb->expr()->in('u.id', $data['creator']));
        empty($data['subsizes']) ?: $qb->andWhere($qb->expr()->in('ddss.id', $data['subsizes']));
        empty($data['subformats']) ?: $qb->andWhere($qb->expr()->in('ddsf.id', $data['subformats']));
        empty($data['subchain']) ?: $qb->andWhere($qb->expr()->in('sc.id', $data['subchain']));

        empty($data['street']) ?: $qb->andWhere('cd.streetName LIKE :street')
            ->setParameter('street', "%$data[street]%");
        empty($data['zipCode']) ?: $qb->andWhere('cd.zipCode LIKE :zipCode')->setParameter('zipCode', "%$data[zipCode]%");
        empty($data['nip']) ?: $qb->andWhere('cd.nip LIKE :nip')
            ->setParameter('nip', "%$data[nip]%");
        empty($data['email']) ?: $qb->andWhere('c.email LIKE :email')
            ->setParameter('email', "%$data[email]%");
        empty($data['phoneNumber']) ?: $qb->andWhere('c.phoneNumber LIKE :phoneNumber')
            ->setParameter('phoneNumber', "%$data[phoneNumber]%");
        empty($data['regon']) ?: $qb->andWhere('cd.regon LIKE :regon')
            ->setParameter('regon', "%$data[regon]%");

        if (isset($data['isactive']) && $data['isactive'] != 2 && $data['isactive'] != '') {
            $qb->andWhere($qb->expr()->eq('c.isActive', $data['isactive']));
        }
        if (!isset($data['isactive'])) {
            $qb->andWhere($qb->expr()->eq('c.isActive', 1));
        }

        if (!empty($data['city'])) {
            if (is_array($data['city'])) {
                $qb->andWhere($qb->expr()->in('cd.city', $data['city']));
            } else {
                $qb->andWhere($qb->expr()->eq('cd.city', $data['city']));
            }
        }

        if (!empty($data['saleStageDateChange'])) {
            $qb->andWhere('c.saleStageDateChange <= :saleStageDateChange')->setParameter('saleStageDateChange', $data['saleStageDateChange']);
        }

        if (!empty($data['pastContactDate'])) {
            $qb->andWhere('c.maxContactDate IS NULL OR c.maxContactDate < NOW()');
        }

        return $qb;
    }
}