<?php

namespace Hr\Repository;

use Doctrine\ORM\Query\ResultSetMappingBuilder;
use Hr\Entity\Dictionary;
use Hr\Entity\DictionaryDetails;
use Hr\Entity\RegionSubregionJoint;

/**
 * SubregionMacroregionJointRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SubregionMacroregionJointRepository extends \Doctrine\ORM\EntityRepository
{
    public function getRegionsForMacroregionContainingSubregion(int $subregionId)
    {
        $subregion = $this->findOneBy(['subregion' => $subregionId]);

        $subregions = [];
        if ($subregion) {
            $temp = $this->findBy(['macroregion' => $subregion->getMacroregion()]);
            foreach ($temp as $t) {
                $subregions[] = $t->getSubregion()->getId();
            }
        }

        $regions = [];
        $temp = $this->_em->getRepository(RegionSubregionJoint::class)->findBy(['subregion' => $subregions]);
        foreach ($temp as $t) {
            $regions[] = $t->getRegion()->getId();
        }

        return $regions;
    }

    public function getUnassignedSubregions(): array
    {
        $sql = "
            select sub.*
            from dictionaryDetails sub
            left join subregionMacroregionJoint smj on sub.id = smj.subregionDicId 
            where sub.dictionaryId = :dicId
            and smj.subregionDicId is null
        ";
        $rsm = new ResultSetMappingBuilder($this->_em);
        $rsm->addRootEntityFromClassMetadata(DictionaryDetails::class, 'sub');
        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('dicId', Dictionary::DIC_SUBREGIONS);

        return $query->getResult();
    }

    public function getMacroregionForRegion(int $regionId): ?DictionaryDetails
    {
        $sql = <<<SQL
select m.*
from regionSubregionJoint rsj
join subregionMacroregionJoint smj on rsj.subregionDicId = smj.subregionDicId
join dictionaryDetails m on smj.macroregionDicId = m.id
where rsj.regionDicId = :id
SQL;
        $rsm = new ResultSetMappingBuilder($this->_em);
        $rsm->addRootEntityFromClassMetadata(DictionaryDetails::class, 'm');
        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('id', $regionId);

        return $query->getResult()[0] ?? null;
    }
}
