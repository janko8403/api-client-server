<?php

namespace Hr\Repository;

use Doctrine\ORM\Query\ResultSetMappingBuilder;
use Hr\Entity\Dictionary;
use Hr\Entity\DictionaryDetails;

/**
 * RegionSubregionJointRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RegionSubregionJointRepository extends \Doctrine\ORM\EntityRepository
{
    public function getSubregionForRegion($id)
    {
        $qb = $this->createQueryBuilder('rsj');
        $qb->andWhere($qb->expr()->eq('rsj.region', $id));

        $tmp = [];
        $data = $qb->getQuery()->execute();

        if (isset($data[0])) {
            return (null !== $data[0]->getSubregion()) ? $data[0]->getSubregion()->getId() : null;
        }

        return null;
    }

    public function getSubregionsForRegions(array $regions): array
    {
        $qb = $this->createQueryBuilder('rsj');
        $qb->distinct();
        $qb->select('s.id', 's.name');
        $qb->innerJoin('rsj.subregion', 's');
        if (!empty($regions)) {
            $qb->andWhere($qb->expr()->in('rsj.region', $regions));
        } else {
            $qb->andWhere('1 = 2');
        }
        $qb->orderBy('s.name');

        $data = [];
        $tmp = $qb->getQuery()->getArrayResult();
        foreach ($tmp as $t) {
            $data[$t['id']] = $t['name'];
        }

        return $data;
    }

    public function getUnassignedRegions(): array
    {
        $sql = "
            select reg.*
            from dictionaryDetails reg
            left join regionSubregionJoint rsj on reg.id = rsj.regionDicId 
            where reg.dictionaryId = :dicId
            and rsj.regionDicId is null
        ";
        $rsm = new ResultSetMappingBuilder($this->_em);
        $rsm->addRootEntityFromClassMetadata(DictionaryDetails::class, 'reg');
        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('dicId', Dictionary::DIC_REGIONS);

        return $query->getResult();
    }
}
